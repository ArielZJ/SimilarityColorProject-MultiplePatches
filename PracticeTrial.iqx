<include>
/file = "MainStructure.iqx"
/file = "PictureAndText.iqx"
/file = "CircleLocation.iqx"
</include>

<text StartPractice>
/ items = ("You are going to do a few practice trials to make you be more familar with the experiment.
When you ready, please press SPACE button to start the practice trial.")
/ position = (50%,50%)
/ fontstyle = ("Arial", 2.8%, true)
/ txbgcolor = (127,127,127)
/ txcolor = yellow
</text>

<text EndPractice>
/ items = ("You have finished the practice trial.
Next page will be the formal test. 
If you are ready, please press SPACE button to start the experiment.")
/ position = (50%,50%)
/ fontstyle = ("Arial", 2.8%, true)
/ txbgcolor = (127,127,127)
/ txcolor = yellow
</text>


<text title>
/ items = ("Practice Trial")
/ position = (50%,5%)
/ fontstyle = ("Arial", 2.8%, true)
/ txbgcolor = (127,127,127)
/ txcolor = yellow
</text>

<values>
/order_practice = 0
</values>

<trial Fixiation_practice>
/ stimulusframes = [1 = cross]
/ timeout = 500
/ recorddata = false
/ ontrialend = [
	values.order_practice += 1;
]
/ branch = [
	trial.PresentCircles_practice
]
</trial>

<counter PracticeCounter>
/ select = noreplace(1-9)
/ selectionrate = block
</counter>


** angle_x_cue has 0 at the top (N), while angle_cue has 0 at the right (E), so need to make them line up
<trial PresentCircles_practice>
/ ontrialbegin = [
	values.angle_1 = rand(-180,180);
	values.angle_2 = values.angle_1 + 180;
	values.angle_3 = values.angle_1 + 90;
	values.angle_4 = values.angle_3 + 180;
	
	values.angle_1_cue = values.angle_1+90;
	values.angle_2_cue = values.angle_2+90;
	values.angle_3_cue = values.angle_3+90;
	values.angle_4_cue = values.angle_4+90;
	
	shape.F1.hposition = expressions.a_1;
	shape.F1.vposition = expressions.b_1;
	shape.F2.hposition = expressions.a_2;
	shape.F2.vposition = expressions.b_2;
	shape.P1.hposition = expressions.a_3;
	shape.P1.vposition = expressions.b_3;
	shape.P2.hposition = expressions.a_4;
	shape.P2.vposition = expressions.b_4;
	shape.F1.height = 2 * values.r_F;
	shape.F1.width = 2 * values.r_F;
	shape.F2.height = 2 * values.r_F;
	shape.F2.width = 2 * values.r_F;
	shape.P1.height = 2 * values.R_P;
	shape.P1.width = 2 * values.R_P;
	shape.P2.height = 2 * values.R_P;
	shape.P2.width = 2 * values.R_P;
	
	if(counter.PracticeCounter.selectedvalue == 1 ||counter.PracticeCounter.selectedvalue == 2||counter.PracticeCounter.selectedvalue == 3){
		trial.PresentCircles_practice.insertstimulusframe(text.cross,1);

		trial.PresentCircles_practice.insertstimulusframe(picture.F1_cue,1);
		
		trial.PresentCircles_practice.insertstimulusframe(shape.F1,1);
		trial.PresentCircles_practice.insertstimulusframe(shape.F2,1);
		
		trial.PresentCircles_practice.insertstimulusframe(shape.P1,1);
		trial.PresentCircles_practice.insertstimulusframe(shape.P2,1);
		

						
		if(counter.PracticeCounter.selectedvalue == 1){
			shape.F1.color = values.color1;
			shape.F2.color = values.color9;
			shape.P1.color = values.color3;
			shape.P2.color = values.color7;
						
		}else if(counter.PracticeCounter.selectedvalue == 2){
			shape.F1.color = values.color2;
			shape.F2.color = values.color8;
			shape.P1.color = values.color1;
			shape.P2.color = values.color9;
			
		}else if(counter.PracticeCounter.selectedvalue == 3){
			shape.F1.color = values.color3;
			shape.F2.color = values.color7;
			shape.P1.color = values.color2;
			shape.P2.color = values.color8;
			
		}
		

		
	}else if(counter.PracticeCounter.selectedvalue == 4 ||counter.PracticeCounter.selectedvalue == 5||counter.PracticeCounter.selectedvalue == 6){
		trial.PresentCircles_practice.insertstimulusframe(text.cross,1);
		
		trial.PresentCircles_practice.insertstimulusframe(picture.F1_cue,1);
		
		trial.PresentCircles_practice.insertstimulusframe(shape.F1,1);
		trial.PresentCircles_practice.insertstimulusframe(shape.P1,1);
		
		trial.PresentCircles_practice.insertstimulusframe(shape.F2,1);
		trial.PresentCircles_practice.insertstimulusframe(shape.P2,1);
		
		
		
		if(counter.PracticeCounter.selectedvalue == 4){
			shape.F1.color = values.color4;
			shape.P1.color = values.color6;
			shape.F2.color = values.color5;
			shape.P2.color = values.color5;
		}else if(counter.PracticeCounter.selectedvalue == 5){
			shape.F1.color = values.color5;
			shape.P1.color = values.color5;
			shape.F2.color = values.color4;
			shape.P2.color = values.color6;
		}else if(counter.PracticeCounter.selectedvalue == 6){
			shape.F1.color = values.color6;
			shape.P1.color = values.color4;
			shape.F2.color = values.color4;
			shape.P2.color = values.color6;
		}
		

		
	}else{
		trial.PresentCircles_practice.insertstimulusframe(text.cross,1);
		
		trial.PresentCircles_practice.insertstimulusframe(picture.P1_cue,1);
		
		trial.PresentCircles_practice.insertstimulusframe(shape.P1,1);
		trial.PresentCircles_practice.insertstimulusframe(shape.P2,1);
		
		trial.PresentCircles_practice.insertstimulusframe(shape.F1,1);
		trial.PresentCircles_practice.insertstimulusframe(shape.F2,1);
		

		
		if(counter.PracticeCounter.selectedvalue == 7){
			shape.P1.color = values.color7;
			shape.P2.color = values.color3;
			shape.F1.color = values.color8;
			shape.F2.color = values.color2;
		}else if(counter.PracticeCounter.selectedvalue == 8){
			shape.P1.color = values.color8;
			shape.P2.color = values.color2;
			shape.F1.color = values.color9;
			shape.F2.color = values.color1;
		}else if(counter.PracticeCounter.selectedvalue == 9){
			shape.P1.color = values.color9;
			shape.P2.color = values.color1;
			shape.F1.color = values.color7;
			shape.F2.color = values.color3;
		}
	
		
	}
]
/ stimulusframes = []
/ timeout = values.patch_timeout
/ ontrialend = [trial.PresentCircles_practice.clearstimulusframes();]
/ recorddata = false

/ branch = [
	if(counter.PracticeCounter.selectedvalue == 1 ||counter.PracticeCounter.selectedvalue == 2||counter.PracticeCounter.selectedvalue == 3){
		trial.peripheral_response_practice_FF}
	else if(counter.PracticeCounter.selectedvalue == 4 ||counter.PracticeCounter.selectedvalue == 5||counter.PracticeCounter.selectedvalue == 6){
		trial.peripheral_response_practice_FP}
	else{
		trial.peripheral_response_practice_PP}
	
]
</trial>

* NB: the 'timeout' variable above is what controls the SOA. Note you have to set the practice trial one separately

** modified these to be specific to the FF, FP, PP cases
<trial peripheral_response_practice_FF>
/ ontrialbegin = [
	shape.F2.hposition = values.response_stim_x;
	shape.F2.vposition = values.response_stim_y;
	shape.F2.height = values.response_stim_height;
	shape.F2.width = values.response_stim_width;
]
/ stimulusframes = [
	1  = response1d, response2d, response3d, response4d, response5d, response6d, response7d, response8d, 
highC_instruction, p_response_instructions,title, similar_reminder, dissimilar_reminder, F2
]
/ validresponse = (response_blank, response1d, response2d, response3d, response4d, response5d, response6d, response7d, response8d)
/ inputdevice = mouse
/ isvalidresponse = [if (trial.peripheral_response_practice_FF.response == "response_blank") false; else
expressions.validresponse_disks
]
/ recorddata = false
/ ontrialend = [
	values.response_time = trial.peripheral_response_practice_FF.latency;
]
/ branch = [trial.centermouse_practice]
</trial>

<trial peripheral_response_practice_FP>
/ ontrialbegin = [
	shape.P1.hposition = values.response_stim_x;
	shape.P1.vposition = values.response_stim_y;
	shape.P1.height = values.response_stim_height;
	shape.P1.width = values.response_stim_width;
]
/ stimulusframes = [
	1  = response1d, response2d, response3d, response4d, response5d, response6d, response7d, response8d, 
highC_instruction, p_response_instructions,title, similar_reminder, dissimilar_reminder,P1
]
/ validresponse = (response_blank, response1d, response2d, response3d, response4d, response5d, response6d, response7d, response8d)
/ inputdevice = mouse
/ isvalidresponse = [if (trial.peripheral_response_practice_FP.response == "response_blank") false; else
expressions.validresponse_disks
]
/ recorddata = false
/ ontrialend = [
	values.response_time = trial.peripheral_response_practice_FP.latency;
]
/ branch = [trial.centermouse_practice]
</trial>

<trial peripheral_response_practice_PP>
/ ontrialbegin = [
	shape.P2.hposition = values.response_stim_x;
	shape.P2.vposition = values.response_stim_y;
	shape.P2.height = values.response_stim_height;
	shape.P2.width = values.response_stim_width;
]
/ stimulusframes = [
	1  = response1d, response2d, response3d, response4d, response5d, response6d, response7d, response8d, 
highC_instruction, p_response_instructions,title, similar_reminder, dissimilar_reminder,P2
]
/ validresponse = (response_blank, response1d, response2d, response3d, response4d, response5d, response6d, response7d, response8d)
/ inputdevice = mouse
/ isvalidresponse = [if (trial.peripheral_response_practice_PP.response == "response_blank") false; else
expressions.validresponse_disks
]
/ recorddata = false
/ ontrialend = [
	values.response_time = trial.peripheral_response_practice_PP.latency;
]
/ branch = [trial.centermouse_practice]
</trial>

<trial centermouse_practice>
/ stimulusframes = [1  = response1d, response2d, response3d, response4d, response5d, response6d, response7d, response8d, 
highC_instruction,centersquare,notice_centre_mouse,process_notice_practice,title, similar_reminder, dissimilar_reminder]
/ inputdevice = mouse
/ recorddata = false
/ validresponse = (centersquare)
/ branch = [
	if (values.order_practice == 9){
		trial.EndPracticeTrail
	}
]
</trial>

<trial EndPracticeTrail>
/ stimulusframes = [1 = EndPractice]
/ validresponse = (57)
</trial>

