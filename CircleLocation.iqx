** r_F sets the radius of the inner circle to 2% of screen size, thus 4% circumference
** r_P determines the scaling size of the peripheral stimulus relative to the central stimulus
	this is currently set to 3x the r_F, thus 6% radius or 12% circumference
** radius_F and radius_P set how far away the stimuli are from the fixation cross. Currently set to 8% and 50-8=42% of screen
** adding radius_cue to set the cue arrows near the central fixation cross
** angle_x_cue has 0 at the top (N), while angle_cue has 0 at the right (E), so need to make them line up

<values>
/x = 1px * display.getpixelsx(50,1)
/y = 1px * display.getpixelsy(50,1)
/r_F = 1px * display.getpixelsx(2,1)
/R_P = 3 * values.r_F
/radius_F = 1px * display.getpixelsy(8,1)
/radius_P = 1px * display.getpixelsy(50,1) - values.R_P
/angle_min_F = deg(acos(1 - 2 * pow(values.r_F,2)/pow(values.radius_F,2)))
/angle_min_P = deg(acos(1 - 2 * pow(values.R_P,2)/pow(values.radius_P,2)))
/angle_1 = 0
/angle_2 = 0
/angle_3 = 0
/angle_4 = 0
/angle_5 = 0
/angle_6 = 0
/angle_7 = 0
/angle_8 = 0
/radius_cue = 1px * display.getpixelsy(3,1)

/angle_1_cue = 0
/angle_2_cue = 0
/angle_3_cue = 0
/angle_4_cue = 0
/angle_5_cue = 0
/angle_6_cue = 0
/angle_7_cue = 0
/angle_8_cue = 0
</values>

<counter F2_position>
/ select = replace
/ items = (1,-1)
</counter>

<counter P2_position>
/ select = replace
/ items = (1,-1)
</counter>

<expressions>
/ theta_1 = (values.angle_1)*(m_pi/180)
/ theta_2 = (values.angle_2)*(m_pi/180)
/ theta_3 = (values.angle_3)*(m_pi/180)
/ theta_4 = (values.angle_4)*(m_pi/180)
/ theta_5 = (values.angle_5)*(m_pi/180)
/ theta_6 = (values.angle_6)*(m_pi/180)
/ theta_7 = (values.angle_7)*(m_pi/180)
/ theta_8 = (values.angle_8)*(m_pi/180)

/ deltax_1 = values.radius_F*cos(expressions.theta_1)
/ deltay_1 = values.radius_F*sin(expressions.theta_1)
/ deltax_2 = values.radius_F*cos(expressions.theta_2)
/ deltay_2 = values.radius_F*sin(expressions.theta_2)
/ deltax_3 = values.radius_P*cos(expressions.theta_3)
/ deltay_3 = values.radius_P*sin(expressions.theta_3)
/ deltax_4 = values.radius_P*cos(expressions.theta_4)
/ deltay_4 = values.radius_P*sin(expressions.theta_4)

/ deltax_5 = values.radius_cue*cos(expressions.theta_1)
/ deltay_5 = values.radius_cue*sin(expressions.theta_1)
/ deltax_6 = values.radius_cue*cos(expressions.theta_2)
/ deltay_6 = values.radius_cue*sin(expressions.theta_2)
/ deltax_7 = values.radius_cue*cos(expressions.theta_3)
/ deltay_7 = values.radius_cue*sin(expressions.theta_3)
/ deltax_8 = values.radius_cue*cos(expressions.theta_4)
/ deltay_8 = values.radius_cue*sin(expressions.theta_4)

/ a_1 = values.x + expressions.deltax_1
/ b_1 = values.y + expressions.deltay_1
/ a_2 = values.x + expressions.deltax_2
/ b_2 = values.y + expressions.deltay_2
/ a_3 = values.x + expressions.deltax_3
/ b_3 = values.y + expressions.deltay_3
/ a_4 = values.x + expressions.deltax_4
/ b_4 = values.y + expressions.deltay_4

/ a_1_cue = values.x + expressions.deltax_5
/ b_1_cue = values.y + expressions.deltay_5
/ a_2_cue = values.x + expressions.deltax_6
/ b_2_cue = values.y + expressions.deltay_6
/ a_3_cue = values.x + expressions.deltax_7
/ b_3_cue = values.y + expressions.deltay_7
/ a_4_cue = values.x + expressions.deltax_8
/ b_4_cue = values.y + expressions.deltay_8

/ deltax_9 = values.radius_F*cos(expressions.theta_5)
/ deltay_9 = values.radius_F*sin(expressions.theta_5)
/ deltax_10 = values.radius_F*cos(expressions.theta_6)
/ deltay_10 = values.radius_F*sin(expressions.theta_6)
/ deltax_11 = values.radius_P*cos(expressions.theta_7)
/ deltay_11 = values.radius_P*sin(expressions.theta_7)
/ deltax_12 = values.radius_P*cos(expressions.theta_8)
/ deltay_12 = values.radius_P*sin(expressions.theta_8)

/ deltax_13 = values.radius_cue*cos(expressions.theta_5)
/ deltay_13 = values.radius_cue*sin(expressions.theta_5)
/ deltax_14 = values.radius_cue*cos(expressions.theta_6)
/ deltay_14 = values.radius_cue*sin(expressions.theta_6)
/ deltax_15 = values.radius_cue*cos(expressions.theta_7)
/ deltay_15 = values.radius_cue*sin(expressions.theta_7)
/ deltax_16 = values.radius_cue*cos(expressions.theta_8)
/ deltay_16 = values.radius_cue*sin(expressions.theta_8)

/ a_5 = values.x + expressions.deltax_9
/ b_5 = values.y + expressions.deltay_9
/ a_6 = values.x + expressions.deltax_10
/ b_6 = values.y + expressions.deltay_10
/ a_7 = values.x + expressions.deltax_11
/ b_7 = values.y + expressions.deltay_11
/ a_8 = values.x + expressions.deltax_12
/ b_8 = values.y + expressions.deltay_12

/ a_5_cue = values.x + expressions.deltax_13
/ b_5_cue = values.y + expressions.deltay_13
/ a_6_cue = values.x + expressions.deltax_14
/ b_6_cue = values.y + expressions.deltay_14
/ a_7_cue = values.x + expressions.deltax_15
/ b_7_cue = values.y + expressions.deltay_15
/ a_8_cue = values.x + expressions.deltax_16
/ b_8_cue = values.y + expressions.deltay_16
</expressions>